/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        //递归的巧妙使用
        //如果其中一条链为空，直接返回另一条链即可
        if (!l1) {
            return l2;
        }
        else if (!l2) {
            return l1;
        }
        //两条链都不空，判断两条链的首结点的值，将较小值所在结点的下一节点和另一条链继续递归，将返回值作为较小值所在节点的新下一结点
        if (l1->val < l2 ->val) {
            l1->next = mergeTwoLists(l1->next,l2);
            return l1;
        }
        else {
            l2->next =mergeTwoLists( l1, l2->next);
            return l2;
        }
    }
};
